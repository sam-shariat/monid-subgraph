// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ControllerChanged extends ethereum.Event {
  get params(): ControllerChanged__Params {
    return new ControllerChanged__Params(this);
  }
}

export class ControllerChanged__Params {
  _event: ControllerChanged;

  constructor(event: ControllerChanged) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get active(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ExpiryExtended extends ethereum.Event {
  get params(): ExpiryExtended__Params {
    return new ExpiryExtended__Params(this);
  }
}

export class ExpiryExtended__Params {
  _event: ExpiryExtended;

  constructor(event: ExpiryExtended) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get expiry(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FusesSet extends ethereum.Event {
  get params(): FusesSet__Params {
    return new FusesSet__Params(this);
  }
}

export class FusesSet__Params {
  _event: FusesSet;

  constructor(event: FusesSet) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get fuses(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NameUnwrapped extends ethereum.Event {
  get params(): NameUnwrapped__Params {
    return new NameUnwrapped__Params(this);
  }
}

export class NameUnwrapped__Params {
  _event: NameUnwrapped;

  constructor(event: NameUnwrapped) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NameWrapped extends ethereum.Event {
  get params(): NameWrapped__Params {
    return new NameWrapped__Params(this);
  }
}

export class NameWrapped__Params {
  _event: NameWrapped;

  constructor(event: NameWrapped) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get name(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fuses(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NameWrapper__getDataResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getFuses(): BigInt {
    return this.value1;
  }

  getExpiry(): BigInt {
    return this.value2;
  }
}

export class NameWrapper extends ethereum.SmartContract {
  static bind(address: Address): NameWrapper {
    return new NameWrapper("NameWrapper", address);
  }

  _tokens(param0: BigInt): BigInt {
    let result = super.call("_tokens", "_tokens(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try__tokens(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_tokens", "_tokens(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allFusesBurned(node: Bytes, fuseMask: BigInt): boolean {
    let result = super.call(
      "allFusesBurned",
      "allFusesBurned(bytes32,uint32):(bool)",
      [
        ethereum.Value.fromFixedBytes(node),
        ethereum.Value.fromUnsignedBigInt(fuseMask),
      ],
    );

    return result[0].toBoolean();
  }

  try_allFusesBurned(
    node: Bytes,
    fuseMask: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allFusesBurned",
      "allFusesBurned(bytes32,uint32):(bool)",
      [
        ethereum.Value.fromFixedBytes(node),
        ethereum.Value.fromUnsignedBigInt(fuseMask),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  canModifyName(node: Bytes, addr: Address): boolean {
    let result = super.call(
      "canModifyName",
      "canModifyName(bytes32,address):(bool)",
      [ethereum.Value.fromFixedBytes(node), ethereum.Value.fromAddress(addr)],
    );

    return result[0].toBoolean();
  }

  try_canModifyName(node: Bytes, addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canModifyName",
      "canModifyName(bytes32,address):(bool)",
      [ethereum.Value.fromFixedBytes(node), ethereum.Value.fromAddress(addr)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  controllers(param0: Address): boolean {
    let result = super.call("controllers", "controllers(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_controllers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("controllers", "controllers(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ens(): Address {
    let result = super.call("ens", "ens():(address)", []);

    return result[0].toAddress();
  }

  try_ens(): ethereum.CallResult<Address> {
    let result = super.tryCall("ens", "ens():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  extendExpiry(parentNode: Bytes, labelhash: Bytes, expiry: BigInt): BigInt {
    let result = super.call(
      "extendExpiry",
      "extendExpiry(bytes32,bytes32,uint64):(uint64)",
      [
        ethereum.Value.fromFixedBytes(parentNode),
        ethereum.Value.fromFixedBytes(labelhash),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );

    return result[0].toBigInt();
  }

  try_extendExpiry(
    parentNode: Bytes,
    labelhash: Bytes,
    expiry: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "extendExpiry",
      "extendExpiry(bytes32,bytes32,uint64):(uint64)",
      [
        ethereum.Value.fromFixedBytes(parentNode),
        ethereum.Value.fromFixedBytes(labelhash),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getData(id: BigInt): NameWrapper__getDataResult {
    let result = super.call(
      "getData",
      "getData(uint256):(address,uint32,uint64)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return new NameWrapper__getDataResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_getData(id: BigInt): ethereum.CallResult<NameWrapper__getDataResult> {
    let result = super.tryCall(
      "getData",
      "getData(uint256):(address,uint32,uint64)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NameWrapper__getDataResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWrapped(node: Bytes): boolean {
    let result = super.call("isWrapped", "isWrapped(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(node),
    ]);

    return result[0].toBoolean();
  }

  try_isWrapped(node: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isWrapped", "isWrapped(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(node),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metadataService(): Address {
    let result = super.call(
      "metadataService",
      "metadataService():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_metadataService(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "metadataService",
      "metadataService():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  names(param0: Bytes): Bytes {
    let result = super.call("names", "names(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBytes();
  }

  try_names(param0: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("names", "names(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    to: Address,
    param1: Address,
    tokenId: BigInt,
    data: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    to: Address,
    param1: Address,
    tokenId: BigInt,
    data: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(id: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registerAndWrapETH2LD(
    label: string,
    wrappedOwner: Address,
    duration: BigInt,
    resolver: Address,
    ownerControlledFuses: i32,
  ): BigInt {
    let result = super.call(
      "registerAndWrapETH2LD",
      "registerAndWrapETH2LD(string,address,uint256,address,uint16):(uint256)",
      [
        ethereum.Value.fromString(label),
        ethereum.Value.fromAddress(wrappedOwner),
        ethereum.Value.fromUnsignedBigInt(duration),
        ethereum.Value.fromAddress(resolver),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(ownerControlledFuses)),
      ],
    );

    return result[0].toBigInt();
  }

  try_registerAndWrapETH2LD(
    label: string,
    wrappedOwner: Address,
    duration: BigInt,
    resolver: Address,
    ownerControlledFuses: i32,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerAndWrapETH2LD",
      "registerAndWrapETH2LD(string,address,uint256,address,uint16):(uint256)",
      [
        ethereum.Value.fromString(label),
        ethereum.Value.fromAddress(wrappedOwner),
        ethereum.Value.fromUnsignedBigInt(duration),
        ethereum.Value.fromAddress(resolver),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(ownerControlledFuses)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registrar(): Address {
    let result = super.call("registrar", "registrar():(address)", []);

    return result[0].toAddress();
  }

  try_registrar(): ethereum.CallResult<Address> {
    let result = super.tryCall("registrar", "registrar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  renew(tokenId: BigInt, duration: BigInt): BigInt {
    let result = super.call("renew", "renew(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(duration),
    ]);

    return result[0].toBigInt();
  }

  try_renew(tokenId: BigInt, duration: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("renew", "renew(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(duration),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setFuses(node: Bytes, ownerControlledFuses: i32): BigInt {
    let result = super.call("setFuses", "setFuses(bytes32,uint16):(uint32)", [
      ethereum.Value.fromFixedBytes(node),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(ownerControlledFuses)),
    ]);

    return result[0].toBigInt();
  }

  try_setFuses(
    node: Bytes,
    ownerControlledFuses: i32,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setFuses",
      "setFuses(bytes32,uint16):(uint32)",
      [
        ethereum.Value.fromFixedBytes(node),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(ownerControlledFuses)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setSubnodeOwner(
    parentNode: Bytes,
    label: string,
    owner: Address,
    fuses: BigInt,
    expiry: BigInt,
  ): Bytes {
    let result = super.call(
      "setSubnodeOwner",
      "setSubnodeOwner(bytes32,string,address,uint32,uint64):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(parentNode),
        ethereum.Value.fromString(label),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(fuses),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );

    return result[0].toBytes();
  }

  try_setSubnodeOwner(
    parentNode: Bytes,
    label: string,
    owner: Address,
    fuses: BigInt,
    expiry: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "setSubnodeOwner",
      "setSubnodeOwner(bytes32,string,address,uint32,uint64):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(parentNode),
        ethereum.Value.fromString(label),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(fuses),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  setSubnodeRecord(
    parentNode: Bytes,
    label: string,
    owner: Address,
    resolver: Address,
    ttl: BigInt,
    fuses: BigInt,
    expiry: BigInt,
  ): Bytes {
    let result = super.call(
      "setSubnodeRecord",
      "setSubnodeRecord(bytes32,string,address,address,uint64,uint32,uint64):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(parentNode),
        ethereum.Value.fromString(label),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(resolver),
        ethereum.Value.fromUnsignedBigInt(ttl),
        ethereum.Value.fromUnsignedBigInt(fuses),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );

    return result[0].toBytes();
  }

  try_setSubnodeRecord(
    parentNode: Bytes,
    label: string,
    owner: Address,
    resolver: Address,
    ttl: BigInt,
    fuses: BigInt,
    expiry: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "setSubnodeRecord",
      "setSubnodeRecord(bytes32,string,address,address,uint64,uint32,uint64):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(parentNode),
        ethereum.Value.fromString(label),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(resolver),
        ethereum.Value.fromUnsignedBigInt(ttl),
        ethereum.Value.fromUnsignedBigInt(fuses),
        ethereum.Value.fromUnsignedBigInt(expiry),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  upgradeContract(): Address {
    let result = super.call(
      "upgradeContract",
      "upgradeContract():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_upgradeContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "upgradeContract",
      "upgradeContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uri(tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_uri(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ens(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _registrar(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _metadataService(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ExtendExpiryCall extends ethereum.Call {
  get inputs(): ExtendExpiryCall__Inputs {
    return new ExtendExpiryCall__Inputs(this);
  }

  get outputs(): ExtendExpiryCall__Outputs {
    return new ExtendExpiryCall__Outputs(this);
  }
}

export class ExtendExpiryCall__Inputs {
  _call: ExtendExpiryCall;

  constructor(call: ExtendExpiryCall) {
    this._call = call;
  }

  get parentNode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get labelhash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExtendExpiryCall__Outputs {
  _call: ExtendExpiryCall;

  constructor(call: ExtendExpiryCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RecoverFundsCall extends ethereum.Call {
  get inputs(): RecoverFundsCall__Inputs {
    return new RecoverFundsCall__Inputs(this);
  }

  get outputs(): RecoverFundsCall__Outputs {
    return new RecoverFundsCall__Outputs(this);
  }
}

export class RecoverFundsCall__Inputs {
  _call: RecoverFundsCall;

  constructor(call: RecoverFundsCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RecoverFundsCall__Outputs {
  _call: RecoverFundsCall;

  constructor(call: RecoverFundsCall) {
    this._call = call;
  }
}

export class RegisterAndWrapETH2LDCall extends ethereum.Call {
  get inputs(): RegisterAndWrapETH2LDCall__Inputs {
    return new RegisterAndWrapETH2LDCall__Inputs(this);
  }

  get outputs(): RegisterAndWrapETH2LDCall__Outputs {
    return new RegisterAndWrapETH2LDCall__Outputs(this);
  }
}

export class RegisterAndWrapETH2LDCall__Inputs {
  _call: RegisterAndWrapETH2LDCall;

  constructor(call: RegisterAndWrapETH2LDCall) {
    this._call = call;
  }

  get label(): string {
    return this._call.inputValues[0].value.toString();
  }

  get wrappedOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get resolver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get ownerControlledFuses(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class RegisterAndWrapETH2LDCall__Outputs {
  _call: RegisterAndWrapETH2LDCall;

  constructor(call: RegisterAndWrapETH2LDCall) {
    this._call = call;
  }

  get registrarExpiry(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenewCall extends ethereum.Call {
  get inputs(): RenewCall__Inputs {
    return new RenewCall__Inputs(this);
  }

  get outputs(): RenewCall__Outputs {
    return new RenewCall__Outputs(this);
  }
}

export class RenewCall__Inputs {
  _call: RenewCall;

  constructor(call: RenewCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RenewCall__Outputs {
  _call: RenewCall;

  constructor(call: RenewCall) {
    this._call = call;
  }

  get expires(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetChildFusesCall extends ethereum.Call {
  get inputs(): SetChildFusesCall__Inputs {
    return new SetChildFusesCall__Inputs(this);
  }

  get outputs(): SetChildFusesCall__Outputs {
    return new SetChildFusesCall__Outputs(this);
  }
}

export class SetChildFusesCall__Inputs {
  _call: SetChildFusesCall;

  constructor(call: SetChildFusesCall) {
    this._call = call;
  }

  get parentNode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get labelhash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get fuses(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetChildFusesCall__Outputs {
  _call: SetChildFusesCall;

  constructor(call: SetChildFusesCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get active(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetFusesCall extends ethereum.Call {
  get inputs(): SetFusesCall__Inputs {
    return new SetFusesCall__Inputs(this);
  }

  get outputs(): SetFusesCall__Outputs {
    return new SetFusesCall__Outputs(this);
  }
}

export class SetFusesCall__Inputs {
  _call: SetFusesCall;

  constructor(call: SetFusesCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get ownerControlledFuses(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetFusesCall__Outputs {
  _call: SetFusesCall;

  constructor(call: SetFusesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetMetadataServiceCall extends ethereum.Call {
  get inputs(): SetMetadataServiceCall__Inputs {
    return new SetMetadataServiceCall__Inputs(this);
  }

  get outputs(): SetMetadataServiceCall__Outputs {
    return new SetMetadataServiceCall__Outputs(this);
  }
}

export class SetMetadataServiceCall__Inputs {
  _call: SetMetadataServiceCall;

  constructor(call: SetMetadataServiceCall) {
    this._call = call;
  }

  get _metadataService(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMetadataServiceCall__Outputs {
  _call: SetMetadataServiceCall;

  constructor(call: SetMetadataServiceCall) {
    this._call = call;
  }
}

export class SetRecordCall extends ethereum.Call {
  get inputs(): SetRecordCall__Inputs {
    return new SetRecordCall__Inputs(this);
  }

  get outputs(): SetRecordCall__Outputs {
    return new SetRecordCall__Outputs(this);
  }
}

export class SetRecordCall__Inputs {
  _call: SetRecordCall;

  constructor(call: SetRecordCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get resolver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get ttl(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetRecordCall__Outputs {
  _call: SetRecordCall;

  constructor(call: SetRecordCall) {
    this._call = call;
  }
}

export class SetResolverCall extends ethereum.Call {
  get inputs(): SetResolverCall__Inputs {
    return new SetResolverCall__Inputs(this);
  }

  get outputs(): SetResolverCall__Outputs {
    return new SetResolverCall__Outputs(this);
  }
}

export class SetResolverCall__Inputs {
  _call: SetResolverCall;

  constructor(call: SetResolverCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get resolver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetResolverCall__Outputs {
  _call: SetResolverCall;

  constructor(call: SetResolverCall) {
    this._call = call;
  }
}

export class SetSubnodeOwnerCall extends ethereum.Call {
  get inputs(): SetSubnodeOwnerCall__Inputs {
    return new SetSubnodeOwnerCall__Inputs(this);
  }

  get outputs(): SetSubnodeOwnerCall__Outputs {
    return new SetSubnodeOwnerCall__Outputs(this);
  }
}

export class SetSubnodeOwnerCall__Inputs {
  _call: SetSubnodeOwnerCall;

  constructor(call: SetSubnodeOwnerCall) {
    this._call = call;
  }

  get parentNode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get label(): string {
    return this._call.inputValues[1].value.toString();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get fuses(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetSubnodeOwnerCall__Outputs {
  _call: SetSubnodeOwnerCall;

  constructor(call: SetSubnodeOwnerCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetSubnodeRecordCall extends ethereum.Call {
  get inputs(): SetSubnodeRecordCall__Inputs {
    return new SetSubnodeRecordCall__Inputs(this);
  }

  get outputs(): SetSubnodeRecordCall__Outputs {
    return new SetSubnodeRecordCall__Outputs(this);
  }
}

export class SetSubnodeRecordCall__Inputs {
  _call: SetSubnodeRecordCall;

  constructor(call: SetSubnodeRecordCall) {
    this._call = call;
  }

  get parentNode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get label(): string {
    return this._call.inputValues[1].value.toString();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get resolver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get ttl(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get fuses(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SetSubnodeRecordCall__Outputs {
  _call: SetSubnodeRecordCall;

  constructor(call: SetSubnodeRecordCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetTTLCall extends ethereum.Call {
  get inputs(): SetTTLCall__Inputs {
    return new SetTTLCall__Inputs(this);
  }

  get outputs(): SetTTLCall__Outputs {
    return new SetTTLCall__Outputs(this);
  }
}

export class SetTTLCall__Inputs {
  _call: SetTTLCall;

  constructor(call: SetTTLCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get ttl(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTTLCall__Outputs {
  _call: SetTTLCall;

  constructor(call: SetTTLCall) {
    this._call = call;
  }
}

export class SetUpgradeContractCall extends ethereum.Call {
  get inputs(): SetUpgradeContractCall__Inputs {
    return new SetUpgradeContractCall__Inputs(this);
  }

  get outputs(): SetUpgradeContractCall__Outputs {
    return new SetUpgradeContractCall__Outputs(this);
  }
}

export class SetUpgradeContractCall__Inputs {
  _call: SetUpgradeContractCall;

  constructor(call: SetUpgradeContractCall) {
    this._call = call;
  }

  get _upgradeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUpgradeContractCall__Outputs {
  _call: SetUpgradeContractCall;

  constructor(call: SetUpgradeContractCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnwrapCall extends ethereum.Call {
  get inputs(): UnwrapCall__Inputs {
    return new UnwrapCall__Inputs(this);
  }

  get outputs(): UnwrapCall__Outputs {
    return new UnwrapCall__Outputs(this);
  }
}

export class UnwrapCall__Inputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }

  get parentNode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get labelhash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UnwrapCall__Outputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }
}

export class UnwrapETH2LDCall extends ethereum.Call {
  get inputs(): UnwrapETH2LDCall__Inputs {
    return new UnwrapETH2LDCall__Inputs(this);
  }

  get outputs(): UnwrapETH2LDCall__Outputs {
    return new UnwrapETH2LDCall__Outputs(this);
  }
}

export class UnwrapETH2LDCall__Inputs {
  _call: UnwrapETH2LDCall;

  constructor(call: UnwrapETH2LDCall) {
    this._call = call;
  }

  get labelhash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get registrant(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UnwrapETH2LDCall__Outputs {
  _call: UnwrapETH2LDCall;

  constructor(call: UnwrapETH2LDCall) {
    this._call = call;
  }
}

export class UpgradeCall extends ethereum.Call {
  get inputs(): UpgradeCall__Inputs {
    return new UpgradeCall__Inputs(this);
  }

  get outputs(): UpgradeCall__Outputs {
    return new UpgradeCall__Outputs(this);
  }
}

export class UpgradeCall__Inputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }

  get parentNode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get label(): string {
    return this._call.inputValues[1].value.toString();
  }

  get wrappedOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get resolver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class UpgradeCall__Outputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }
}

export class UpgradeETH2LDCall extends ethereum.Call {
  get inputs(): UpgradeETH2LDCall__Inputs {
    return new UpgradeETH2LDCall__Inputs(this);
  }

  get outputs(): UpgradeETH2LDCall__Outputs {
    return new UpgradeETH2LDCall__Outputs(this);
  }
}

export class UpgradeETH2LDCall__Inputs {
  _call: UpgradeETH2LDCall;

  constructor(call: UpgradeETH2LDCall) {
    this._call = call;
  }

  get label(): string {
    return this._call.inputValues[0].value.toString();
  }

  get wrappedOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get resolver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UpgradeETH2LDCall__Outputs {
  _call: UpgradeETH2LDCall;

  constructor(call: UpgradeETH2LDCall) {
    this._call = call;
  }
}

export class WrapCall extends ethereum.Call {
  get inputs(): WrapCall__Inputs {
    return new WrapCall__Inputs(this);
  }

  get outputs(): WrapCall__Outputs {
    return new WrapCall__Outputs(this);
  }
}

export class WrapCall__Inputs {
  _call: WrapCall;

  constructor(call: WrapCall) {
    this._call = call;
  }

  get name(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get wrappedOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get resolver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WrapCall__Outputs {
  _call: WrapCall;

  constructor(call: WrapCall) {
    this._call = call;
  }
}

export class WrapETH2LDCall extends ethereum.Call {
  get inputs(): WrapETH2LDCall__Inputs {
    return new WrapETH2LDCall__Inputs(this);
  }

  get outputs(): WrapETH2LDCall__Outputs {
    return new WrapETH2LDCall__Outputs(this);
  }
}

export class WrapETH2LDCall__Inputs {
  _call: WrapETH2LDCall;

  constructor(call: WrapETH2LDCall) {
    this._call = call;
  }

  get label(): string {
    return this._call.inputValues[0].value.toString();
  }

  get wrappedOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ownerControlledFuses(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get resolver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class WrapETH2LDCall__Outputs {
  _call: WrapETH2LDCall;

  constructor(call: WrapETH2LDCall) {
    this._call = call;
  }
}
